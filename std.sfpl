
--------------------------------------------------------------------------------
-- SFPL Standard Library
--------------------------------------------------------------------------------

------------------------------------------------------------
-- Functions

id : @ a. a -> a
  = \x. x;

const : @ a b. a -> b -> a
  = \x _. x;

compose : @ a b c. (b -> c) -> (a -> b) -> a -> c
  = \f g x. f (g x);

flip : @ a b c. (a -> b -> c) -> b -> a -> c
  = \f x y. f y x;

app : @ a b. (a -> b) -> a -> b
  = id;

on : @ a b c. (b -> b -> c) -> (a -> b) -> a -> a -> c
  = \f g x y. f (g x) (g y);

------------------------------------------------------------
-- Boolean type

data bool
  = true  : bool
  | false : bool;

-- Eliminator
ifThenElse : @ a. bool -> a -> a -> a
  = \x a b. case x of {
      true . a;
      false. b
    };

-- Conversion from 'int' to 'bool'
intToBool : int -> bool
  = \x. case x of {
      0. false;
      _. true
    };

----------------------------------------
-- Boolean operators

not : bool -> bool
  = \x. if x then false else true;

and : bool -> bool -> bool
  = \x y. if x then y else false;

or : bool -> bool -> bool
  = \x y. if x then true else y;

----------------------------------------
-- Comparison

eqInt : int -> int -> bool
  = \x y. intToBool (__eq x y);

eqFloat : float -> float -> bool
  = \x y. intToBool (__eq x y);

eqChar : char -> char -> bool
  = \x y. intToBool (__eq x y);

neqInt : int -> int -> bool
  = \x y. ! (x == y);

neqFloat : float -> float -> bool
  = \x y. ! (x == y);

neqChar : char -> char -> bool
  = \x y. ! (x == y);

ltInt : int -> int -> bool
  = \x y. intToBool (__lt x y);

ltFloat : float -> float -> bool
  = \x y. intToBool (__lt x y);

ltChar : char -> char -> bool
  = \x y. intToBool (__lt x y);

lteInt : int -> int -> bool
  = \x y. x < y || x == y;

lteFloat : float -> float -> bool
  = \x y. x < y || x == y;

lteChar : char -> char -> bool
  = \x y. x < y || x == y;

gtInt : int -> int -> bool
  = \x y. ! (x <= y);

gtFloat : float -> float -> bool
  = \x y. ! (x <= y);

gtChar : char -> char -> bool
  = \x y. ! (x <= y);

gteInt : int -> int -> bool
  = \x y. ! (x < y);

gteFloat : float -> float -> bool
  = \x y. ! (x < y);

gteChar : char -> char -> bool
  = \x y. ! (x < y);

------------------------------------------------------------
-- Numbers

even : int -> bool
  = \x. x & 1 == 0;

odd : int -> bool
  = \x. x & 1 == 1;

------------------------------------------------------------
-- Characters

------------------------------------------------------------
-- Tuples

fst : @ a b. (a, b) -> a
  = \x. split x as (a, b). a;

snd : @ a b. (a, b) -> b
  = \x. split x as (a, b). b;

fst3 : @ a b c. (a, b, c) -> a
  = \x. split x as (a, b, c). a;

snd3 : @ a b c. (a, b, c) -> b
  = \x. split x as (a, b, c). b;

thd3 : @ a b c. (a, b, c) -> c
  = \x. split x as (a, b, c). c;

------------------------------------------------------------
-- IO monad and primitive operations

error : @ a b. a -> b
  = \x. __error x;

fmap : @ a b. (a -> b) -> % a -> % b
  = \f m. do x <- m then % f x;

cmap : @ a b. b -> % a -> % b
  = compose fmap const;

pure : @ a. a -> % a
  = \x. % x;

ap : @ a b. % (a -> b) -> % a -> % b
  = \mf ma. do f <- mf;
               a <- ma
            then % f a;

seq : @ a b. % a -> % b -> % b
  = \ma mb. do _ <- ma then mb;

bind : @ a b. % a -> (a -> % b) -> % b
  = \ma f. do a <- ma then f a;

read : % char
  = __read;

peek : % char
  = __peek;

isEOF : % bool
  = fmap intToBool __is_eof;

putc : char -> % ()
  = \x. __putc x;

print : @ a. a -> % ()
  = \x. __print x;

------------------------------------------------------------
-- List type

data list a
  = nil  : [a]
  | cons : a -> [a] -> [a];

----------------------------------------
-- Basic list functions

head : @ a. [a] -> a
  = \xs. case xs of {
      []    . error "head: empty list";
      x :: _. x
    };

last : @ a. [a] -> a
  = \xs. case xs of {
      []     . error "last: empty list";
      x :: xs. case xs of {
        []     . x;
        _ :: xs. last xs
      }
    };

tail : @ a. [a] -> [a]
  = \xs. case xs of {
      []     . error "tail: empty list";
      _ :: xs. xs
    };

init : @ a. [a] -> [a]
  = \xs. case xs of {
      []     . error "init: empty list";
      x :: xs. case xs of {
        []. [];     
        _ . x :: init xs
      }
    };

singleton : @ a. a -> [a]
  = \x. [x];

null : @ a. [a] -> bool
  = \xs. case xs of {
      []. true;
      _ . false
    };

----------------------------------------
-- Transformations

map : @ a b. (a -> b) -> [a] -> [b]
  = \f xs. case xs of {
      []     . [];
      x :: xs. f x :: map f xs
    };

filter : @ a. (a -> bool) -> [a] -> [a]
  = \p xs. case xs of {
      []     . [];
      x :: xs. if p x
        then x :: filter p xs
        else filter p xs
    };

foldr : @ a b. (a -> b -> b) -> b -> [a] -> b
  = \f z xs. case xs of {
      []     . z;
      x :: xs. f x (foldr f z xs)
    };

foldl : @ a b. (b -> a -> b) -> b -> [a] -> b
  = \f z xs. case xs of {
      []     . z;
      x :: xs. foldl f (f z x) xs
    };

zipWith : @ a b c. (a -> b -> c) -> [a] -> [b] -> [c]
  = \f xs ys. case xs of {
      []     . [];
      x :: xs. case ys of {
        []     . [];
        y :: ys. f x y :: zipWith f xs ys
      };
    };

zip : @ a b. [a] -> [b] -> [(a, b)]
  = zipWith (\a b. (a, b));

unzip : @ a b. [(a, b)] -> ([a], [b])
  = \ts. case ts of {
    []     . ([], []);
    t :: ts. split t as (x, y). split unzip ts as (xs, ys). (x :: xs, y :: ys)
  };

----------------------------------------
-- More list functions

length : @ a. [a] -> int
  = foldl (\x _. x + 1) 0;

reverse : @ a. [a] -> [a]
  = foldl (flip cons) nil;

append : @ a. [a] -> [a] -> [a]
  = \xs ys. foldr cons ys xs;

concat : @ a. [[a]] -> [a]
  = foldr append nil;

concatMap : @ a b. (a -> [b]) -> [a] -> [b]
  = \f. compose concat (map f);

any : @ a. (a -> bool) -> [a] -> bool
  = \f. foldr (\x b. f x || b) false;

all : @ a. (a -> bool) -> [a] -> bool
  = \f. foldr (\x b. f x && b) true;

take : @ a. int -> [a] -> [a]
  = \n xs. if n <= 0
      then []
      else case xs of {
        []     . [];
        x :: xs. x :: take (n - 1) xs
      };

drop : @ a. int -> [a] -> [a]
  = \n xs. if n <= 0
      then xs
      else case xs of {
        []     . [];
        _ :: xs. drop (n - 1) xs
      };

splitAt : @ a. int -> [a] -> ([a], [a])
  = \n xs. if n <= 0
      then ([], xs)
      else case xs of {
        []     . ([], []);
        x :: xs. split splitAt (n - 1) xs as (xs, ys). (x :: xs, ys)
      };

takeWhile : @ a. (a -> bool) -> [a] -> [a]
  = \p xs. case xs of {
    []     . [];
    x :: xs. if p x
      then x :: takeWhile p xs
      else []
  };

dropWhile : @ a. (a -> bool) -> [a] -> [a]
  = \p xs. case xs of {
    []     . [];
    x :: ys. if p x
      then dropWhile p ys
      else xs
  };

partition : @ a. (a -> bool) -> [a] -> ([a], [a])
  = \p xs. case xs of {
    []     . ([], []);
    x :: xs. split partition p xs as (ys, zs).
      if p x
        then (x :: ys, zs)
        else (ys, x :: zs)
  };

------------------------------------------------------------
-- IO

printLn : @ a. a -> % ()
  = \x. print x >> putc '\n';

putStr : [char] -> % ()
  = \cs. case cs of {
    []     . % ();
    c :: cs. putc c >> putStr cs
  };

putStrLn : [char] -> % ()
  = \s. putStr s >> putc '\n';

main : % ()
  = putStrLn "Hello, world!";
